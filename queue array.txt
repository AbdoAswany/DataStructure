#include <iostream>

using namespace std;
#define MAX_SIZE 100

class ArrayQueue {
private:
    int queue[MAX_SIZE];
    int front;
    int rear;

public:
    ArrayQueue() {
        front = -1;
        rear = -1;
    }

    bool isEmpty() {
        return front == -1;
    }

    bool isFull() {
        return (rear + 1) % MAX_SIZE == front;
    }

    void enqueue(int item) {
        if (isFull()) {
            cout << "Queue is full. Cannot enqueue item " << item << ".\n";
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % MAX_SIZE;
        }

        queue[rear] = item;
        cout << "Item " << item << " enqueued into the queue.\n";
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty. Cannot dequeue from an empty queue.\n";
            return -1;
        }

        int item = queue[front];

        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % MAX_SIZE;
        }

        cout << "Item " << item << " dequeued from the queue.\n";
        return item;
    }

    void displayQueue() {
        if (isEmpty()) {
            cout << "Queue is empty.\n";
            return;
        }

        cout << "Queue: ";
        int i = front;
        while (i != rear) {
            cout << queue[i] << " ";
            i = (i + 1) % MAX_SIZE;
        }
        cout << queue[i] << endl;
    }
};

int main() {
    ArrayQueue queue;

    queue.enqueue(10);
    queue.enqueue(20);
    queue.enqueue(30);
    queue.displayQueue();
    queue.dequeue();
    queue.displayQueue();
    queue.dequeue();
    queue.dequeue();
    queue.displayQueue();

    return 0;
}
